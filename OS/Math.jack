// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array m_two_to_the;  // 2**i, i = 0..15, serve as bit masks
    static int m_remainder;

    /** Initializes the library. */
    function void init() {
        var int i;
        let m_two_to_the = Array.new(16);
        let m_two_to_the[0] = 1;
        let i = 1;
        while (i < 16) {
            let m_two_to_the[i] = m_two_to_the[i-1] + m_two_to_the[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }

    /** Returns true if the i-th bit of x is 1, false otherwise. */
    function boolean bit(int x, int i) {
        // res = m_two_to_the[i] & x (note that: 0 & . = 0)
        // m_two_to_the[i]: 0..010..0
        //               x: ....?....
        // if x[i]==1, res: 000010000
        // if x[i]==0, res: 000000000
        //        Note that: 
        if ((x & m_two_to_the[i]) = 0) {
            return false;
        }
        else {
            return true;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        // '*' is 16 times slower than '+' (for 16-bit integers)
        // '*': O(n), where n is the number of bits for an integer
        // '+': O(1), implemented at the hardware level
        var int i, sum, shifted_x;
        let i = 0;
        let sum = 0;
        let shifted_x = x;
        // for i = 0 ... w-1
        while (i < 16) {  // int: 16 bits
            // if (i-th bit of y == 1), sum = sum + shifted_x
            if (Math.bit(y, i)) {
                let sum = sum + shifted_x;
            }
            // shifted_x = shifted_x * 2
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int __divide(int x, int y) {
        // assume: x >= 0 && y > 0
        var int q;
        if ((y > x) | (y < 0)) {
            let m_remainder = x;
            return 0;
        }
        let q = Math.__divide(x, y+y);
        if (m_remainder < y) {
            return q + q;
        }
        else {
            let m_remainder = m_remainder - y;
            return q + q + 1;
        }
    }
    function int divide(int x, int y) {
        // this division algorithm only involves +/- operations
        // complexity: O(n), where n is the bit width of the inputs
        // Note: since division is implemented in a recursive way, due to
        //       the overhead of function calls, '/' can be slower than '*'
        var int x_sign, y_sign, q;
        if (y = 0) {
            do Sys.error(3);
        }
        let q = Math.__divide(Math.abs(x), Math.abs(y));
        if ((x > 0 & y < 0) | (x < 0 & y > 0)) {
            return -q;
        }
        else {
            return q;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // Complexity: O(n)
        var int y, j, y_plus_2j, y_plus_2j_2;
        if (x < 0) {
            do Sys.error(4);
        }
        let y = 0;
        let j = 7;  // j = n/2 - 1, where n is the number of bits in x
        while (j > -1) {  // j = n/2-1 ... 0
            // if (y + 2**j)**2 <= x: y = y + 2**j
            let y_plus_2j = y + m_two_to_the[j];
            let y_plus_2j_2 = y_plus_2j * y_plus_2j;
            if ( (~(y_plus_2j_2 > x)) & (y_plus_2j_2) > 0 ) {
                let y = y_plus_2j;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) {
            return b;
        }
        else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        }
        else {
            return a;
        }
    }
}
